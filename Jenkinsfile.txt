import org.json.JSONObject

pipeline {
    environment {

        // github settings 

        def branchName = "master"
        def repoName = "petapi"

        // googlechat settings 

        def googlechatroom = ""

        // slack settings

        def slackchannel = "postmantest" 

        // general settings

        def pipeline = "test_postman"       
    }

    stages {  

        stage('Send googlechat pre-build message'){
            environment {
                def message = """
                        Starting Job ${env.JOB_NAME} with Build Number: ${env.BUILD_NUMBER} ...
                    """
            }
            steps {
                echo "Sending Googlechat message..."                   
                googlechatSend room:"${googlechatroom}", message:"${message}"
            }        
        }

        stage('Send Slack pre-build message'){
            environment {
                def message = """
                        Starting Job ${env.JOB_NAME} with Build Number: ${env.BUILD_NUMBER} ...
                    """
            }
            steps {
                echo "Sending Slack message..."                   
                slackSend channel: "${slackchannel}", message: "${message}"
            }        
        }
        
        stage('PullScript') {
            steps {             
                checkout poll: false, 
                scm: [$class: 'GitSCM', 
                    branches: [[name: "*" + branchName]], 
                    doGenerateSubmoduleConfigurations: false, 
                    extensions: [[$class: 'CloneOption', 
                                                depth: 0, 
                                                noTags: false, 
                                                reference: '', 
                                                shallow: false, 
                                                timeout: 60]], 
                    submoduleCfg: [], 
                    userRemoteConfigs: [[credentialsId: 'ad2ee82a-948c-4149-a75a-a559c49df311', url: 'https://github.com/samsagar14/' + repoName  + '.git']]]
            }
        }
        
        stage('Execute Scripts'){
            steps {
            
                echo "Start Automated API Testing"

                load "${WORKSPACE}/runtests_QA1_SMOKE_CRITICAL.txt"
                
                script {

                    if(fileExists('NewmanResults')) {
                        sh 'rmdir /s /q NewmanResults'
                    } 
                    
                    sh 'mkdir NewmanResults'
                                    
                }   
                                
                script {
                    tests.each {
                        sh """
                            call newman run "${testsfolder}${it}" -e "${environment}" --reporters html,junit --reporter-html-export "${reporters}//${it.minus(".json")}.html" --reporter-junit-export "${reporters}//${it.minus(".json")}.xml"
                            IF %ERRORLEVEL% NEQ 0 Echo An error was found
                            exit /B
                        """
                    }
                }
            }
        }

        stage('Publish Newman results'){
            steps{
                echo "Start publishing Newman results"
                publishHTML (target: [
                      allowMissing: false,
                      alwaysLinkToLastBuild: false,
                      keepAll: true,
                      reportDir: 'NewmanResults/',
                      reportFiles: "*.html",
                      reportName: "Newman_Report"
                      ])
            }
        }
        
        stage('Prepare Notification') {
           
            steps{

                sh """
                    SET folder=%WORKSPACE%\\DevOps
                    if not exist %folder% mkdir %folder%
                """
                // get ps script from repo and checkout it to subfolder

                dir('Devops') {
                    checkout scm: [$class: 'GitSCM', 
                            branches: [[name: '*/DIP-777']], 
                            doGenerateSubmoduleConfigurations: false, 
                            extensions: [[$class: 'SparseCheckoutPaths', 
                                            sparseCheckoutPaths: [[path: "Quality Automation/${env.pipeline}"]]]], 
                            submoduleCfg: [], 
                            userRemoteConfigs: [[credentialsId: 'ad2ee82a-948c-4149-a75a-a559c49df311', 
                            url: '']]]
                }

                // copy ps script to workspace root

                sh """
                    SET source=%WORKSPACE%\\DevOps\\Quality Automation\\%pipeline%\\api_variables.ps1
                    xcopy /Y "%source%" "%WORKSPACE%"
                """
                echo "Getting API variables from output files..."

                // ps script get test results and details from output xml and put them to file apivar.txt as variables

                // script also create output file "elk" for elasticsearch input using _bulk method

                sh '''
                        powershell.exe -NonInteractive -ExecutionPolicy Bypass -Command %WORKSPACE%\\api_variables.ps1                  
                        EXIT /b
                    '''                            
            }
        }

        stage('Result evaluation') {
			steps{
                script {
                    load 'apivar.txt'
                    threshold = (API_FAILED/API_TOTAL) * 100
                    echo "Threshold is : " + threshold + " %"
       
                    if (threshold > 50) {
                        echo "Threshold is more than 50%, current value: " + threshold + " %"
                        currentBuild.result = "FAILURE"
                        echo "Result is: " + currentBuild.result
           
                    } else {
                        echo "Threshold is less than 50%, current value: " + threshold + " %"
                        currentBuild.result = "SUCCESS"
                        echo "Result is: " + currentBuild.result
                    }
                }                          
            }
        }
    }
    post {
        success {
            
          echo "Loading API variables ..."

            load 'apivar.txt'            

            echo "Sending notifications..."

            script {                  
                   
                    def link="<a href='/${env.pipeline}/${env.BUILD_NUMBER}/Results/'>Open</a>"  
                    def linkslack = "</testing/reports/${env.pipeline}/${env.BUILD_NUMBER}/Results/|Open>"
                    def linkslack1 = "</view/Automated%20Testing/job/QTA/job/Newman/job/${env.pipeline}/test_results_analyzer/|Open>"
                    def linkslack2 = "</view/Automated%20Testing/job/QTA/job/Newman/job/${env.pipeline}/${env.BUILD_NUMBER}/testReport/|Open>"

                    def message = """
                        <b>Job:</b> ${env.JOB_NAME},
                        <b>BuildNumber:</b> ${env.BUILD_NUMBER},
                        <b>status:</b> ${currentBuild.currentResult}
                        <br />                        
                    """

                    def messageslack = """
                        *Job*: ${env.JOB_NAME}\n*BuildNumber*: ${env.BUILD_NUMBER} , *status*: ${currentBuild.result}
                    """

                    def messageslack1 = ""
                    def messageslack2 = ""
                    def messagesplit1 = ""
                    def messagesplit2 = ""

                    message += "Postman collections results:<br />"                                   

                    for (String item : MESSAGES) {                            
                            message += item + "<br />"                          
                    }

                    for (String item : MESSAGESSLACK) {                            
                            messageslack1 += "\n" + item + ";"
                    }

                    split = messageslack1.split(';')
                    messagesplit1 = split[0..5].join(", ")
                    messagesplit2 = split[6..split.size()-1].join(", ")

                    message += """
                        <b>Summary: 
                        <br /> Total:</b> ${API_TOTAL},
                        <b>Pass:</b> ${API_PASSED},
                        <b>Fail:</b> ${API_FAILED}
                        <br /> You can check all reports files here : ${link}
                    """

                    messageslack2 = """
                        *Summary*:\n *Total*: ${API_TOTAL}, *Pass*: ${API_PASSED}, *Fail*: ${API_FAILED}\nYou can check all reports files here : ${linkslack}\nTest Results Analyzer : ${linkslack1}\nTest Results Details : ${linkslack2}
                    """

                    hipchatSend room:"${hipchatroom}",color:"GREEN", message: message
                    slackSend channel: "${slackchannel}", color: "good", message: messageslack
                    slackSend channel: "${slackchannel}", color: "good", message: messagesplit1
                    slackSend channel: "${slackchannel}", color: "good", message: messagesplit2
                    slackSend channel: "${slackchannel}", color: "good", message: messageslack2
                    junit allowEmptyResults: true, healthScaleFactor: 0.0, testResults: 'NewmanResults/*.xml'   
                    cleanWs()                   
                    
            }       
        }

        failure {

           echo "Loading API variables ..."

            load 'apivar.txt'            

            echo "Sending notifications..."

            script {                  
                   
                    def link="<a href='/testing/reports/${env.pipeline}/${env.BUILD_NUMBER}/Results/'>Open</a>"  
                    def linkslack = "/testing/reports/${env.pipeline}/${env.BUILD_NUMBER}/Results/|Open>"
                    def linkslack1 = "/view/Automated%20Testing/job/QTA/job/Newman/job/${env.pipeline}/test_results_analyzer/|Open>"
                    def linkslack2 = "/view/Automated%20Testing/job/QTA/job/Newman/job/${env.pipeline}/${env.BUILD_NUMBER}/testReport/|Open>"

                    def message = """
                        <b>Job:</b> ${env.JOB_NAME},
                        <b>BuildNumber:</b> ${env.BUILD_NUMBER},
                        <b>status:</b> ${currentBuild.currentResult}
                        <br />                        
                    """

                    def messageslack = """
                        *Job*: ${env.JOB_NAME}\n*BuildNumber*: ${env.BUILD_NUMBER} , *status*: ${currentBuild.result}
                    """

                    def messageslack1 = ""
                    def messageslack2 = ""
                    def messagesplit1 = ""
                    def messagesplit2 = ""

                    message += "Postman collections results:<br />"                                   

                    for (String item : MESSAGES) {                            
                            message += item + "<br />"                          
                    }

                    for (String item : MESSAGESSLACK) {                            
                            messageslack1 += "\n" + item + ";"
                    }

                    split = messageslack1.split(';')
                    messagesplit1 = split[0..5].join(", ")
                    messagesplit2 = split[6..split.size()-1].join(", ")

                    message += """
                        <b>Summary: 
                        <br /> Total:</b> ${API_TOTAL},
                        <b>Pass:</b> ${API_PASSED},
                        <b>Fail:</b> ${API_FAILED}
                        <br /> You can check all reports files here : ${link}
                    """

                    messageslack2 = """
                        *Summary*:\n *Total*: ${API_TOTAL}, *Pass*: ${API_PASSED}, *Fail*: ${API_FAILED}\nYou can check all reports files here : ${linkslack}\nTest Results Analyzer : ${linkslack1}\nTest Results Details : ${linkslack2}
                    """

                    hipchatSend room:"${hipchatroom}",color:"RED", message: message
                    slackSend channel: "${slackchannel}", color: "danger", message: messageslack
                    slackSend channel: "${slackchannel}", color: "danger", message: messagesplit1
                    slackSend channel: "${slackchannel}", color: "danger", message: messagesplit2
                    slackSend channel: "${slackchannel}", color: "danger", message: messageslack2
                    junit allowEmptyResults: true, healthScaleFactor: 0.0, testResults: 'NewmanResults/*.xml'            
                    cleanWs()                   
            }       
        }
    }    
}
